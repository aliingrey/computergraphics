///***
// assignment1.cpp
// Assignment-1: Cartoonify
//
// Name: Ingrey, Alison
//
// Collaborators: Alexia Filler
// ** Note: although the assignment should be completed individually
// you may speak with classmates on high level algorithmic concepts. Please
// list their names in this section
//
// Project Summary: A short paragraph (3-4 sentences) describing the work you
// did for the project: e.g. did you use the Chaikin's or Bezier's algorithm?
// Did you take an iterative or recursive approach?
//I used an iterative approach to implement Chaiki's Method to draw Danny Devito's face.
//In the generate_points method, I calculate the x and y distance between points and then add points 1/4 and 3/4 in between,
//and iteratively add points.
//
// ***/
//
//
#ifdef __APPLE__
#include <OpenGL/gl.h>
#include <OpenGL/glu.h>
#include <GLUT/glut.h>
#else
#include <GL/gl.h>
#include <GL/glu.h>
#include <GL/glut.h>
#endif

#include <vector>
#include <iostream>
using namespace std;

class Vertex {
    GLfloat x, y;
public:
    Vertex(GLfloat, GLfloat);
    GLfloat get_y() { return y; };
    GLfloat get_x() { return x; };
};

Vertex::Vertex(GLfloat X, GLfloat Y) {
    x = X;
    y = Y;
}

void setup() {
    glClearColor(1.0f, 1.0f, 1.0f, 1.0f);
}

vector<Vertex> generate_points(vector<Vertex> control_points) {
    vector<Vertex> new_points;
    new_points.push_back(control_points.at(0));

    for(int i = 0; i < (control_points.size()-1); i++) {
        //get distance between two points by x and by y
        float x_distance_qtr = (control_points[i+1].get_x() - control_points[i].get_x())* 0.25;
        float y_distance_qtr = (control_points[i+1].get_y() - control_points[i].get_y())* 0.25;
        float x_distance_three_qtr = (control_points[i+1].get_x() - control_points[i].get_x())* 0.75;
        float y_distance_three_qtr = (control_points[i+1].get_y() - control_points[i].get_y())* 0.75;

        //create new points by adding on 1/4 value to each x and y (repeat for 3/4 value)
        Vertex p0 = Vertex(control_points[i].get_x() + x_distance_qtr, control_points[i].get_y() + y_distance_qtr);
        Vertex p1 = Vertex(control_points[i].get_x() + x_distance_three_qtr, control_points[i].get_y() + y_distance_three_qtr);

        //add p0 and p1 to set of points
        new_points.push_back(p0);
        new_points.push_back(p1);
    }
    new_points.push_back(control_points.back());
    return new_points;
}

void draw_curve(vector<Vertex> control_points, int n_iter) {
    vector<Vertex> new_points = control_points; //put into generate points fxn, updates
    vector<Vertex> generated_points;

    glBegin(GL_LINES);
    for(int i = 0; i < n_iter; i++) {
        generated_points = generate_points(new_points);
        new_points = generated_points;
    }


    for (int i = 0; i < new_points.size() - 1; i++) {
        glVertex2f(new_points[i].get_x(), new_points[i].get_y());
        glVertex2f(new_points[i + 1].get_x(), new_points[i + 1].get_y());
    }
    glEnd();
}

vector< vector<Vertex> > sketch() {
    vector< vector<Vertex> > sketch_points;
    
    vector<Vertex> face;
    face.push_back(Vertex(-0.48f, 0.15f));
    face.push_back(Vertex(-0.314f, -0.65f));
    face.push_back(Vertex(0.0f, -0.9f));
    face.push_back(Vertex(0.314f, -0.73f));
    face.push_back(Vertex(0.5f, -0.553f));
    face.push_back(Vertex(0.573f, 0.08f));
    face.push_back(Vertex(0.496f, 0.60f));
    face.push_back(Vertex(0.0f, 1.044f));
    face.push_back(Vertex(-0.495f, 0.504f));
    face.push_back(Vertex(-0.486f, 0.145f));
    sketch_points.push_back(face);
    
    vector<Vertex> left_hair;
    //left_hair.push_back(Vertex(-0.38f, 0.045f));
    left_hair.push_back(Vertex(-0.43f, -0.05f));
    left_hair.push_back(Vertex(-0.48f, 0.27f));
    left_hair.push_back(Vertex(-0.37f, 0.08f));
    left_hair.push_back(Vertex(-0.38f, 0.62f));
    sketch_points.push_back(left_hair);
    
    vector<Vertex> right_hair;
     //right_hair.push_back(Vertex(-0.395f, 0.72f));
     //right_hair.push_back(Vertex(0.334f, 0.668f));
     right_hair.push_back(Vertex(0.4f, 0.65f));
     right_hair.push_back(Vertex(0.367f, 0.385f));
     right_hair.push_back(Vertex(0.51f, 0.302f));
     right_hair.push_back(Vertex(0.54f, 0.08f));
     sketch_points.push_back(right_hair);
    
    vector<Vertex> right_ear;
    right_ear.push_back(Vertex(0.53f, 0.06f));
    right_ear.push_back(Vertex(0.6f, 0.32f));
    right_ear.push_back(Vertex(0.64f, 0.12f));
    right_ear.push_back(Vertex(0.60f, -0.15f));
    right_ear.push_back(Vertex(0.51f, -0.35f));

    sketch_points.push_back(right_ear);
    
    vector<Vertex> left_ear;
    left_ear.push_back(Vertex(-0.48f, 0.15f));
    left_ear.push_back(Vertex(-0.61f, 0.376f));
    left_ear.push_back(Vertex(-0.59f, -0.07f));
    left_ear.push_back(Vertex(-0.39f, -0.29f));
    left_ear.push_back(Vertex(-0.45f, -0.01f));
    left_ear.push_back(Vertex(-0.48f, 0.15f));
    sketch_points.push_back(left_ear);
    
    
    //RIGHT EYEBROW
    vector<Vertex> brow_r;
    brow_r.push_back(Vertex(0.118f, 0.23f));
    brow_r.push_back(Vertex(0.404f, 0.318f));
    brow_r.push_back(Vertex(0.425f, 0.21f));
    brow_r.push_back(Vertex(0.48f, 0.13f));
    sketch_points.push_back(brow_r);
    
    vector<Vertex> brow_r2;
    brow_r2.push_back(Vertex(0.142f, 0.19f));
    brow_r2.push_back(Vertex(0.31f, 0.21f));
    brow_r2.push_back(Vertex(0.397f, 0.17f));
    brow_r2.push_back(Vertex(0.48f, 0.13f));
    sketch_points.push_back(brow_r2);
    
    // LEFT EYEBROW
    vector<Vertex> left_brow;
    left_brow.push_back(Vertex(-0.008f, 0.23f));
    left_brow.push_back(Vertex(-0.294f, 0.318f));
    left_brow.push_back(Vertex(-0.315f, 0.21f));
    left_brow.push_back(Vertex(-0.37f, 0.13f));
    sketch_points.push_back(left_brow);
    vector<Vertex> left_brow2;
    left_brow2.push_back(Vertex(-0.032f, 0.192f));
    left_brow2.push_back(Vertex(-0.20f, 0.208f));
    left_brow2.push_back(Vertex(-0.287f, 0.176f));
    left_brow2.push_back(Vertex(-0.37f, 0.13f));
    sketch_points.push_back(left_brow2);

    
    
    //LEFT EYELID
    vector<Vertex> eyelid_l;
    eyelid_l.push_back(Vertex(-0.342f, 0.082f));
    eyelid_l.push_back(Vertex(-0.22f, 0.197f));
    eyelid_l.push_back(Vertex(-0.053f, 0.184f));
    eyelid_l.push_back(Vertex(-0.07f, 0.07f));
    sketch_points.push_back(eyelid_l);

    //RIGHT EYELID
    vector<Vertex> right_eyelid;
    right_eyelid.push_back(Vertex(0.4f, 0.06f));
    right_eyelid.push_back(Vertex(0.3f, 0.15f));
    right_eyelid.push_back(Vertex(0.26f, 0.18f));
    right_eyelid.push_back(Vertex(0.17f, 0.12f));
    right_eyelid.push_back(Vertex(0.16f, 0.06f));
    sketch_points.push_back(right_eyelid);
    
    //PUPILS
    vector<Vertex> left_pupil;
    left_pupil.push_back(Vertex(-0.23f, 0.145f));
    left_pupil.push_back(Vertex(-0.23f, 0.07f));
    left_pupil.push_back(Vertex(-0.1f, 0.147f));
    left_pupil.push_back(Vertex(-0.21f, 0.183f));
    left_pupil.push_back(Vertex(-0.23f, 0.145f));
    sketch_points.push_back(left_pupil);
    
    vector<Vertex> right_pupil;
    right_pupil.push_back(Vertex(0.33f, 0.14f));
    right_pupil.push_back(Vertex(0.34f, 0.07f));
    right_pupil.push_back(Vertex(0.24f, 0.09f));
    right_pupil.push_back(Vertex(0.19f, 0.14f));
    right_pupil.push_back(Vertex(0.31f, 0.18f));
    right_pupil.push_back(Vertex(0.33f, 0.14f));
    sketch_points.push_back(right_pupil);
    
    //NOSE
    vector<Vertex> nose;
    nose.push_back(Vertex(-0.03, 0.174f));
    nose.push_back(Vertex(-0.04f, 0.02f));
    nose.push_back(Vertex(-0.048f, -0.097f));
    nose.push_back(Vertex(-0.14f, -0.163f));
   // nose.push_back(Vertex(-0.174f, -0.24f));
    nose.push_back(Vertex(-0.06f, -0.268f));
    nose.push_back(Vertex(0.0f, -0.35f));
    nose.push_back(Vertex(0.16f, -0.268f));
    nose.push_back(Vertex(0.2f, -0.24f));
    nose.push_back(Vertex(0.24f, -0.163f));
    nose.push_back(Vertex(0.148f, -0.097f));
    nose.push_back(Vertex(0.14f, 0.02f));
    nose.push_back(Vertex(0.13, 0.174f));
    
    sketch_points.push_back(nose);
    
    //MOUTH LINES
    vector<Vertex> line_left;
    line_left.push_back(Vertex(-0.15f, -0.21f));
    line_left.push_back(Vertex(-0.25f, -0.44f));
    line_left.push_back(Vertex(-0.24f, -0.5f));
    sketch_points.push_back(line_left);
    //MOUTH LINES
    vector<Vertex> line_right;
    line_right.push_back(Vertex(0.27f, -0.21f));
    line_right.push_back(Vertex(0.33f, -0.44f));
    line_right.push_back(Vertex(0.3f, -0.5f));
    sketch_points.push_back(line_right);
    
    
    // LIPS
    vector<Vertex> lip_bottom;
    lip_bottom.push_back(Vertex(-0.19f, -0.51f));
    lip_bottom.push_back(Vertex(-0.032f, -0.59f));
    lip_bottom.push_back(Vertex(0.25f, -0.5f));
    sketch_points.push_back(lip_bottom);
    vector<Vertex> lip_bottom2;
    lip_bottom2.push_back(Vertex(-0.19f, -0.51f));
    lip_bottom2.push_back(Vertex(-0.018f, -0.52f));
    lip_bottom2.push_back(Vertex(0.25f, -0.5f));
    sketch_points.push_back(lip_bottom2);
    vector<Vertex> lip_top_l;
    lip_top_l.push_back(Vertex(-0.19f, -0.512f));
    lip_top_l.push_back(Vertex(-0.082f, -0.46f));
    lip_top_l.push_back(Vertex(-0.015f, -0.451f));
    lip_top_l.push_back(Vertex(0.022f, -0.479f));
    sketch_points.push_back(lip_top_l);
    vector<Vertex> lip_top_r;
    lip_top_r.push_back(Vertex(0.022f, -0.47f));
    lip_top_r.push_back(Vertex(0.115f, -0.45f));
    lip_top_r.push_back(Vertex(0.182f, -0.46f));
    lip_top_r.push_back(Vertex(0.25f, -0.52f));
    sketch_points.push_back(lip_top_r);
    
    return sketch_points;
}

void display() {
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    glColor3f(0.0f, 0.0f, 0.0f);
    
    vector< vector<Vertex> > initial_points = sketch();
    
    for (int i = 0; i < initial_points.size(); i++) {
        vector<Vertex> points_i = initial_points[i];
        vector<Vertex> points_to_draw = generate_points(points_i);
        draw_curve(points_to_draw, 10);
    }
    glutSwapBuffers();
}

int main(int argc, char *argv[]) {
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_RGB | GLUT_DEPTH | GLUT_DOUBLE);
    glutInitWindowSize(800,600); // Set your own window size
    glutCreateWindow("Assignment 1");
    setup();
    glutDisplayFunc(display);
    glutMainLoop();
    return 0;
}

