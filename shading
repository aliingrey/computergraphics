/***
 Assignment-4: Shading via Illumination and Colors
 
 Name: Ingrey, Ali
 
 Collaborators: Filler, Ali; Zafaris, Serena
 ** Note: although the assignment should be completed individually
 you may speak with classmates on high level algorithmic concepts. Please
 list their names in this section
 
 Project Summary: A short paragraph (3-4 sentences) describing the work you
 did for the project.
 ***/


#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#ifdef __APPLE__
#include <OpenGL/gl.h>
#include <OpenGL/glu.h>
#include <GLUT/glut.h>
#else
#include <GL/gl.h>
#include <GL/glu.h>
#include <GL/glut.h>
#endif

#pragma GCC diagnostic pop

#include <iostream>
#include <stdlib.h>
#include <math.h>
#include <vector>
#include <stdio.h>

using namespace std;

vector<GLfloat> AMB = {0.45, 0.45, 0.45};
vector<GLfloat> DIFF = {0.15, 0.15, 0.15};
vector<GLfloat> SPEC = {0.5, 0.5, 0.5};
vector<GLfloat> LIGHT = {0, 5, 0};
vector<GLfloat> CAMERA = {0.0 - 2.0, 0.0 - 3.0, 0.0- 5.0};

// If a float is < EPSILON or > -EPILSON then it should be 0
float EPSILON = 0.000001;
// theta is the angle to rotate the scene
float THETA = 0.0;

/**************************************************
 *              Object Model Class                *
 *                                                *
 *  Stores the points of the object as a vector   *
 *  along with the colors and normals for each    *
 *  point. Normals are computed from the points.  *
 *                                                *
 *************************************************/
class ObjectModel {
    vector<GLfloat> _points;
    vector<GLfloat> _normals;
    vector<GLfloat> _base_colors;
    vector<GLfloat> _colors;
public:
    ObjectModel() { };
    vector<GLfloat> get_points() { return _points; };
    vector<GLfloat> get_normals() { return _normals; };
    vector<GLfloat> get_base_colors() { return _base_colors; };
    vector<GLfloat> get_colors() { return _colors; };
    void set_points(vector<GLfloat> points) { _points = points; };
    void set_normals(vector<GLfloat> normals) { _normals = normals; };
    void set_base_colors(vector<GLfloat> base_colors) { _base_colors = base_colors; };
    void set_colors(vector<GLfloat> colors) { _colors = colors; };
};

// The model of the scene
ObjectModel SCENE;

/**************************************************
 *              Utilitie Functions                *
 *************************************************/

// Initializes a square plane of unit lengths
vector<GLfloat> init_plane() {
    vector<GLfloat> vertices = {
        +0.5,   +0.5,   +0.0,
        -0.5,   +0.5,   +0.0,
        -0.5,   -0.5,   +0.0,
        +0.5,   -0.5,   +0.0
    };
    return vertices;
}

// Converts degrees to radians for rotation
float deg2rad(float d) {
    return (d*M_PI) / 180.0;
}

// Converts a vector to an array
GLfloat* vector2array(vector<GLfloat> vec) {
    GLfloat* arr = new GLfloat[vec.size()];
    for (int i = 0; i < vec.size(); i++) {
        arr[i] = vec[i];
    }
    return arr;
}

// Converts Cartesian coordinates to homogeneous coordinates
vector<GLfloat> to_homogeneous_coord(vector<GLfloat> cartesian_coords) {
    vector<GLfloat> result;
    for (int i = 0; i < cartesian_coords.size(); i++) {
        result.push_back(cartesian_coords[i]);
        if ((i+1) % 3 == 0) {
            result.push_back(1.0);
        }
    }
    return result;
}

// Converts Cartesian coordinates to homogeneous coordinates
vector<GLfloat> to_cartesian_coord(vector<GLfloat> homogeneous_coords) {
    vector<GLfloat> result;
    for (int i = 0; i < homogeneous_coords.size(); i++) {
        if ((i+1) % 4 == 0) {
            continue;
        } else {
            result.push_back(homogeneous_coords[i]);
        }
    }
    return result;
}

// Definition of a translation matrix
vector<GLfloat> translation_matrix (float dx, float dy, float dz) {
    vector<GLfloat> translate_mat = {
        1.0,    0.0,    0.0,    dx,
        0.0,    1.0,    0.0,    dy,
        0.0,    0.0,    1.0,    dz,
        0.0,    0.0,    0.0,    1.0
    };
    return translate_mat;
}

// Definition of a scaling matrix
vector<GLfloat> scaling_matrix (float sx, float sy, float sz) {
    vector<GLfloat> scale_mat = {
        sx,     0.0,    0.0,    0.0,
        0.0,    sy,     0.0,    0.0,
        0.0,    0.0,    sz,     0.0,
        0.0,    0.0,    0.0,    1.0
    };
    return scale_mat;
}

// Definition of a rotation matrix about the x-axis theta degrees
vector<GLfloat> rotation_matrix_x (float theta) {
    theta = deg2rad(theta);
    vector<GLfloat> rotate_mat_x = {
        
        1.0,    0.0,                    0.0,                       0.0,
        0.0,    (float)(cos(theta)),    (float)(-sin(theta)),      0.0,
        0.0,    (float)(sin(theta)),    (float)(cos(theta)),       0.0,
        0.0,    0.0,                    0.0,                       1.0
    };
    return rotate_mat_x;
}


// Definition of a rotation matrix about the y-axis by theta degrees
vector<GLfloat> rotation_matrix_y (float theta) {
    theta = deg2rad(theta);
    vector<GLfloat> rotate_mat_y = {
        (float)cos(theta),     0.0,     (float)-sin(theta),    0.0,
        0.0,                   1.0,     0.0,                  0.0,
        (float)sin(theta),    0.0,     (float)cos(theta),    0.0,
        0.0,                   0.0,     0.0,                  1.0
    };
    return rotate_mat_y;
}


// Definition of a rotation matrix about the z-axis by theta degrees
vector<GLfloat> rotation_matrix_z (float theta) {
    theta = deg2rad(theta);
    vector<GLfloat> rotate_mat_z = {
        (float)cos(theta),  (float)-sin(theta), 0.0,    0.0,
        (float)sin(theta),  (float)cos(theta),  0.0,    0.0,
        0.0,                0.0,                1.0,    0.0,
        0.0,                0.0,                0.0,    1.0
    };
    return rotate_mat_z;
}

// Perform matrix multiplication for A B
vector<GLfloat> mat_mult(vector<GLfloat> A, vector<GLfloat> B) {
    vector<GLfloat> result;
    
    for (int b = 0; b < B.size()/4; b++) {
        for (int a = 0; a < 4; a++) {
            float element_wise_sum = 0.0;
            for (int k = 0; k < 4;  k++) {
                float element_wise = A[a*4+k]*B[b*4+k];
                if (element_wise < EPSILON && element_wise > -1.0*EPSILON) {
                    element_wise = 0.0;
                }
                element_wise_sum += element_wise;
            }
            result.push_back(element_wise_sum);
        }
    }
    return result;
}

// Builds a unit cube centered at the origin
vector<GLfloat> build_cube() {
    vector<GLfloat> result;
    // Primitive plane
    vector<GLfloat> a0 = to_homogeneous_coord(init_plane());
    // Construct 6 planes of the cube
    vector<GLfloat> a1 = mat_mult(translation_matrix(0.0,  0.0,  0.5), a0);
    vector<GLfloat> a2 = mat_mult(translation_matrix(0.0,  0.0, -0.5), mat_mult(rotation_matrix_y(180), a0));
    vector<GLfloat> a3 = mat_mult(translation_matrix(-0.5, 0.0,  0.0), mat_mult(rotation_matrix_y((-90)), a0));
    vector<GLfloat> a4 = mat_mult(translation_matrix(0.5,  0.0,  0.0), mat_mult(rotation_matrix_y((90)), a0));
    vector<GLfloat> a5 = mat_mult(translation_matrix(0.0,  0.5,  0.0), mat_mult(rotation_matrix_x((-90)), a0));
    vector<GLfloat> a6 = mat_mult(translation_matrix(0.0, -0.5,  0.0), mat_mult(rotation_matrix_x((90)), a0));
    
    result.insert(std::end(result), std::begin(a1), std::end(a1));
    result.insert(std::end(result), std::begin(a2), std::end(a2));
    result.insert(std::end(result), std::begin(a3), std::end(a3));
    result.insert(std::end(result), std::begin(a4), std::end(a4));
    result.insert(std::end(result), std::begin(a5), std::end(a5));
    result.insert(std::end(result), std::begin(a6), std::end(a6));
    
    return result;
}


/**************************************************
 *           Generating Surface Normals           *
 *                                                *
 *  Generate the surface normals of the objects   *
 *  using the cross product between two vectors   *
 *  that lie on the surface (plane) of interest.  *
 *  Recall that the direction of the normal to a  *
 *  surface follows the Right Hand Rule.          *
 *                                                *
 *************************************************/

// Performs the cross product between two vectors
vector<GLfloat> cross_product(vector<GLfloat> A, vector<GLfloat> B) {
    // TODO: performs the cross product between two vectors
    vector<GLfloat> C;
    C.push_back(A[1]*B[2] - B[1]*A[2]);
    C.push_back(A[0]*B[2] - B[0]*A[2]);
    C.push_back(A[0]*B[1] - B[0]*A[1]);
    
    return C;
}

vector<GLfloat> generate_normals(vector<GLfloat> points) {
    vector<GLfloat> normals;
    
    for(int i = 0 ; i < points.size(); i += 16){
        vector<GLfloat> a;
        vector<GLfloat> b;
        vector<GLfloat> c;
        
        a.push_back(points[i] - points[i+12]);
        a.push_back(points[i+1] - points[i+13]);
        a.push_back(points[i+2] - points[i+14]);
        
        b.push_back(points[i+8] - points[i+12]);
        b.push_back(points[i+9] - points[i+13]);
        b.push_back(points[i+10] - points[i+14]);
        c = cross_product(a,b);
        
        for(int i = 0; i < 4; i++) {
            normals.insert(normals.end(), c.begin(),c.end());
        }
    }
    
    // Note: each plane (quad) contains 4 points, choose the points
    // to generate your vectors such that the normals (given by the
    // cross product, point to the correct direction
    
    return normals;
    
    
    // Note: each plane (quad) contains 4 points, choose the points
    // to generate your vectors such that the normals (given by the
    // cross product, point to the correct direction
    
}
/**************************************************
 *       Shading via Illumination and Color       *
 *                                                *
 *  Generate the set of colors for each face of   *
 *  the planes that compose the objects in the    *
 *  scene. Based on the light source and surface  *
 *  normals, render the colors of the objects by  *
 *  applying the shading equation.                *
 *                                                *
 *************************************************/



// Initializes the base color of a plane to a single color
vector<GLfloat> init_base_color(GLfloat r, GLfloat g, GLfloat b) {
    vector<GLfloat> base_color = {
        r,   g,   b,
        r,   g,   b,
        r,   g,   b,
        r,   g,   b
    };
    return base_color;
}

// Initializes the base color of a plane by specifying the color of each point
vector<GLfloat> init_base_color(GLfloat r0, GLfloat g0, GLfloat b0, GLfloat r1, GLfloat g1, GLfloat b1,
                                GLfloat r2, GLfloat g2, GLfloat b2, GLfloat r3, GLfloat g3, GLfloat b3) {
    // This enables OpenGL to use interpolation for (Gouraud) shading the plane
    vector<GLfloat> base_color = {
        r0,   g0,   b0,
        r1,   g1,   b1,
        r2,   g2,   b2,
        r3,   g3,   b3
    };
    return base_color;
}

// Performs the dot product between two vectors
GLfloat dot_product(vector<GLfloat> a, vector<GLfloat> b) {
    GLfloat answer = a[0]*b[0] + a[1]*b[1] + a[2]*b[2];
    // TODO: perform the dot product between two vectors
    
    return answer;
}

GLfloat magnitude(vector<GLfloat> vec) {
    GLfloat sum = 0;
    for(int i = 0; i < 3; i++) {
        sum = sum + pow(vec[i], 2);
    }
    return sqrt(sum);
}

vector <GLfloat> normalize(vector<GLfloat> vec, GLfloat mag) {
    for(int i = 0; i < 3; i++) {
        vec[i] = vec[i] / mag;
    }
    return vec;
}


vector<GLfloat> vector_subtraction(vector<GLfloat> vector1, vector<GLfloat> vector2){
    vector<GLfloat> result;
    result.push_back(vector1[0] - vector2[0]);
    result.push_back(vector1[1] - vector2[1]);
    result.push_back(vector1[2] - vector2[2]);
    return result;
}

ObjectModel apply_shading(ObjectModel object_model, vector<GLfloat> light_source, vector<GLfloat> camera,
                          vector<GLfloat> amb, vector<GLfloat> diff, vector<GLfloat> spec, GLfloat m) {
    vector<GLfloat> colors;
    
    // vectors containing the base colors, points, and normals of the input object model
    vector<GLfloat> object_base_colors = object_model.get_base_colors();
    // convert points to cartesian because they are currently homogeneous
    vector<GLfloat> object_points = to_cartesian_coord(object_model.get_points());
    vector<GLfloat> object_normals = object_model.get_normals();
    
    GLfloat red_amb = amb[0];
    GLfloat green_amb = amb[1];
    GLfloat blue_amb = amb[2];
    
    GLfloat red_diff = diff[0];
    GLfloat green_diff = diff[1];
    GLfloat blue_diff = diff[2];
    
    GLfloat red_spec = spec[0];
    GLfloat green_spec = spec[1];
    GLfloat blue_spec = spec[2];
    
    //camera
    camera = normalize(camera, magnitude(camera));
    
    // loop through for each point (vector of length 3)
    for(int i = 0; i < object_points.size()/3; i ++){
        vector<GLfloat> light_vector = {
            object_points[i*3] - light_source[0], //x coord
            object_points[i*3 + 1] - light_source[1], //y coord
            object_points[i*3 + 2] - light_source[2] //z coord
        };
        
        //normlaize
        light_vector = normalize(light_vector, magnitude(light_vector));
        
        vector<GLfloat> base_color = {object_base_colors[i], object_base_colors[i+1], object_base_colors[i+2]};
        vector<GLfloat> normal = {object_normals[i*3], object_normals[i*3+1], object_normals[i*3+2]};
        
        GLfloat red_base = base_color[0];
        GLfloat green_base = base_color[1];
        GLfloat blue_base = base_color[2];
        
        vector<GLfloat> h_vector = {
            camera[i*3] + light_vector[0], //x coord
            camera[i*3 + 1] + light_vector[1], //y coord
            camera[i*3 + 2] + light_vector[2] //z coord
        };
        
        h_vector = normalize(h_vector, magnitude(h_vector));
 
        GLfloat n_dot_l = dot_product(normal, light_vector);
        GLfloat n_dot_h = dot_product(normal, h_vector);
        
        GLfloat I_r = red_base * (red_amb + (red_diff * (n_dot_l)) + red_spec * (n_dot_h));
        colors.push_back(I_r);
        
        GLfloat I_g = green_base * (green_amb + (green_diff * (n_dot_l)) + green_spec * (n_dot_h));
        colors.push_back(I_g);
        
        GLfloat I_b = blue_base * (blue_amb + (blue_diff * (n_dot_l)) + blue_spec * (n_dot_h));
        colors.push_back(I_b);
    }
    
    object_model.set_colors(colors);
    return object_model;
}



/**************************************************
 *            Camera and World Modeling           *
 *                                                *
 *  create a scene by applying transformations to *
 *  the objects built from planes and position    *
 *  the camera to view the scene by setting       *
 *  the projection/viewing matrices               *
 *                                                *
 *************************************************/

void setup() {
    // Enable the vertex array functionality
    glEnableClientState(GL_VERTEX_ARRAY);
    // Enable the color array functionality (so we can specify a color for each vertex)
    glEnableClientState(GL_COLOR_ARRAY);
    // Enable depth test
    glEnable(GL_DEPTH_TEST);
    // Accept fragment if it closer to the camera than the former one
    glDepthFunc(GL_LESS);
    // Set up some default base color
    glColor3f(0.5, 0.5, 0.5);
    // Set up white background
    glClearColor(1.0, 1.0, 1.0, 0.0);
}

void init_camera() {
    // Camera parameters
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    
    // Define a 50 degree field of view, 1:1 aspect ratio, near and far planes at 3 and 7
    gluPerspective(50.0, 1.0, 2.0, 10.0);
    // Position camera at (2, 3, 5), attention at (0, 0, 0), up at (0, 1, 0)
    gluLookAt(2.0, 6.0, 5.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0);
    
    // TODO: Setup your camera here
    
}




ObjectModel build_couch() {
    ObjectModel couch;
    vector<GLfloat> couch_points;
    
    vector<GLfloat> couch_bottom_right = mat_mult(scaling_matrix(1.2, 0.5, 1.45), build_cube());
    couch_bottom_right = mat_mult(rotation_matrix_y(70), couch_bottom_right);
    couch_bottom_right = mat_mult(translation_matrix(2, 0, -0.45), couch_bottom_right);
    
    vector<GLfloat> couch_bottom_middle = mat_mult(scaling_matrix(1.5, 0.5, 1.5), build_cube());
    couch_bottom_middle = mat_mult(rotation_matrix_y(70), couch_bottom_middle);
    couch_bottom_middle = mat_mult(translation_matrix(.5, 0, 0), couch_bottom_middle);
    
    vector<GLfloat> couch_bottom_long = mat_mult(scaling_matrix(2.5, 0.5, 2), build_cube());
    couch_bottom_long = mat_mult(rotation_matrix_y(70), couch_bottom_long);
    couch_bottom_long = mat_mult(translation_matrix(-0.9, 0, 1.2), couch_bottom_long);
    
    vector<GLfloat> couch_back_right = mat_mult(scaling_matrix(3, 0.3, 1.5), build_cube());
    couch_back_right = mat_mult(rotation_matrix_x(90), couch_back_right);
    couch_back_right = mat_mult(rotation_matrix_y(-20), couch_back_right);
    couch_back_right = mat_mult(translation_matrix(1, 0.5, -0.86), couch_back_right);
    
    vector<GLfloat> couch_back_left = mat_mult(scaling_matrix(2, 0.3, 1.5), build_cube());
    couch_back_left = mat_mult(rotation_matrix_x(90), couch_back_left);
    couch_back_left = mat_mult(rotation_matrix_y(-20), couch_back_left);
    couch_back_left = mat_mult(translation_matrix(-1.3, 0.5, 0), couch_back_left);
    
    
    vector<GLfloat> couch_arm_left = mat_mult(scaling_matrix(0.4, .75, 1.8), build_cube());
    couch_arm_left = mat_mult(rotation_matrix_y(-20), couch_arm_left);
    couch_arm_left = mat_mult(translation_matrix(-2.2, 0.5
                                                 , 1), couch_arm_left);
    
    vector<GLfloat> couch_arm_right = mat_mult(scaling_matrix(0.3, .75, 1.8), build_cube());
    couch_arm_right = mat_mult(rotation_matrix_y(-20), couch_arm_right);
    couch_arm_right = mat_mult(translation_matrix(2.8, 0.5 ,-0.75), couch_arm_right);
    
    couch_points.insert(couch_points.end(), couch_bottom_right.begin(), couch_bottom_right.end());
    couch_points.insert(couch_points.end(), couch_bottom_middle.begin(), couch_bottom_middle.end());
    couch_points.insert(couch_points.end(), couch_bottom_long.begin(), couch_bottom_long.end());
    couch_points.insert(couch_points.end(), couch_back_right.begin(), couch_back_right.end());
    couch_points.insert(couch_points.end(), couch_back_left.begin(), couch_back_left.end());
    couch_points.insert(couch_points.end(), couch_arm_left.begin(), couch_arm_left.end());
    couch_points.insert(couch_points.end(), couch_arm_right.begin(), couch_arm_right.end());
    couch.set_points(couch_points);
    
    vector<GLfloat> couch_normals = generate_normals(couch_points);
    couch.set_normals(couch_normals);
    
    vector<GLfloat> colors = init_base_color(0.76,0.94,0.92);
    vector<GLfloat> couch_colors;
    for(int i = 0; i < 42; i++) {
        couch_colors.insert(couch_colors.end(), colors.begin(), colors.end());
    }
    couch.set_base_colors(couch_colors);
    //couch = apply_shading(couch, LIGHT, CAMERA, AMB, DIFF, SPEC, 1);
    
    return couch;

}

ObjectModel build_table() {
    ObjectModel table;
    
    vector<GLfloat> table_points;
    
    vector<GLfloat> table_top = mat_mult(scaling_matrix(1.8, 0.1, .9), build_cube());
    table_top = mat_mult(rotation_matrix_y(-20), table_top);
    table_top = mat_mult(translation_matrix(2, 0.5, 1.25), table_top);
    
    vector<GLfloat> table_leg_backleft = mat_mult(scaling_matrix(.05, 0.65, .05), build_cube());
    table_leg_backleft = mat_mult(translation_matrix(1.2, 0.2, 1.25), table_leg_backleft);
    
    vector<GLfloat> table_leg_backright = mat_mult(scaling_matrix(.05, 0.65, .05), build_cube());
    table_leg_backright = mat_mult(translation_matrix(2.8, 0.2, 1.25), table_leg_backright);
    
    vector<GLfloat> table_leg_frontleft = mat_mult(scaling_matrix(.05, 0.65, .05), build_cube());
    table_leg_frontleft = mat_mult(translation_matrix(2.6, 0.2, 0.75), table_leg_frontleft);
    
    vector<GLfloat> table_leg_frontright = mat_mult(scaling_matrix(.05, 0.65, .05), build_cube());
    table_leg_frontright = mat_mult(translation_matrix(1.3, 0.2, 1.8), table_leg_frontright);
    
    table_points.insert(table_points.end(), table_top.begin(), table_top.end());
    table_points.insert(table_points.end(), table_leg_backleft.begin(), table_leg_backleft.end());
    table_points.insert(table_points.end(), table_leg_backright.begin(), table_leg_backright.end());
    table_points.insert(table_points.end(), table_leg_frontleft.begin(), table_leg_frontleft.end());
    table_points.insert(table_points.end(), table_leg_frontright.begin(), table_leg_frontright.end());
    
    table.set_points(table_points);
    
    vector<GLfloat> table_normals = generate_normals(table_points);
    table.set_normals(table_normals);
    
    vector<GLfloat> colors = init_base_color(0.8,0.6,0.5);
    vector<GLfloat> table_colors;
    for(int i = 0; i < 30; i++) {
        table_colors.insert(table_colors.end(), colors.begin(), colors.end());
    }
    table.set_base_colors(table_colors);
    //table = apply_shading(table, LIGHT, CAMERA, AMB, DIFF, SPEC, 1);
    
    return table;
}

ObjectModel build_lamp() {
    ObjectModel lamp;
    vector<GLfloat> lamp_points;
    
    vector<GLfloat> lampshade = mat_mult(scaling_matrix(.5, .5, .5), build_cube());
    lampshade = mat_mult(translation_matrix(-2.7, 2, 0), lampshade);
    
    vector<GLfloat> lamp_leg_01 = mat_mult(scaling_matrix(.05, 4, .05), build_cube());
    lamp_leg_01 = mat_mult(rotation_matrix_z(-10), lamp_leg_01);
    lamp_leg_01 = mat_mult(translation_matrix(-3, 0, 0), lamp_leg_01);
    
    vector<GLfloat> lamp_leg_02 = mat_mult(scaling_matrix(.05, 4, .05), build_cube());
    lamp_leg_02 = mat_mult(rotation_matrix_z(10), lamp_leg_02);
    lamp_leg_02 = mat_mult(translation_matrix(-2.5, 0, 0), lamp_leg_02);
    
    lamp_points.insert(lamp_points.end(), lampshade.begin(), lampshade.end());
    lamp_points.insert(lamp_points.end(), lamp_leg_01.begin(), lamp_leg_01.end());
    lamp_points.insert(lamp_points.end(), lamp_leg_02.begin(), lamp_leg_02.end());
    
    lamp.set_points(lamp_points);
    
    vector<GLfloat> lamp_normals = generate_normals(lamp_points);
    lamp.set_normals(lamp_normals);
    
    vector<GLfloat> colors = init_base_color(0.9,0.7,0.5);
    vector<GLfloat> lamp_colors;
    for(int i = 0; i < 18; i++) {
        lamp_colors.insert(lamp_colors.end(), colors.begin(), colors.end());
    }
    lamp.set_base_colors(lamp_colors);
    //couch = apply_shading(couch, LIGHT, CAMERA, AMB, DIFF, SPEC, 1);
    
    /*
    lamp = apply_shading(lamp, LIGHT, CAMERA, AMB, DIFF, SPEC, 1);
    lamp.set_colors(lamp.get_colors());
     */
    return lamp;
}

ObjectModel build_pillows() {
    ObjectModel pillows;
    
    vector<GLfloat> pillow_points;
    
    // build pillow geometry
    vector<GLfloat> pillow_01 = mat_mult(scaling_matrix(.55, .65, .2), build_cube());
    pillow_01 = mat_mult(rotation_matrix_x(-10), pillow_01);
    pillow_01 = mat_mult(translation_matrix(2, 0.4, -0.8), pillow_01);
    
    vector<GLfloat> pillow_02 = mat_mult(scaling_matrix(.55, .65, .2), build_cube());
    pillow_02 = mat_mult(rotation_matrix_x(-10), pillow_02);
    pillow_02 = mat_mult(translation_matrix(2.3, 0.4, -1), pillow_02);
    
    vector<GLfloat> pillow_03 = mat_mult(scaling_matrix(.65, .65, .2), build_cube());
    pillow_03 = mat_mult(rotation_matrix_y(-40), pillow_03);
    pillow_03 = mat_mult(translation_matrix(-1, 1, 0.5), pillow_03);
    
    vector<GLfloat> pillow_04 = mat_mult(scaling_matrix(.75, .85, .2), build_cube());
    pillow_04 = mat_mult(rotation_matrix_y(-40), pillow_04);
    pillow_04 = mat_mult(translation_matrix(-1.5, 1, 0.5), pillow_04);
    
    
    pillow_points.insert(pillow_points.end(), pillow_01.begin(), pillow_01.end());
    pillow_points.insert(pillow_points.end(), pillow_02.begin(), pillow_02.end());
    pillow_points.insert(pillow_points.end(), pillow_03.begin(), pillow_03.end());
    pillow_points.insert(pillow_points.end(), pillow_04.begin(), pillow_04.end());
    
    pillows.set_points(pillow_points);

    vector<GLfloat> pillows_normals = generate_normals(pillow_points);
    pillows.set_normals(pillows_normals);
    
    vector<GLfloat> colors = init_base_color(0.9,0.9,1);
    vector<GLfloat> pillows_colors;
    for(int i = 0; i < 24; i++) {
        pillows_colors.insert(pillows_colors.end(), colors.begin(), colors.end());
    }
    pillows.set_base_colors(pillows_colors);
    //table = apply_shading(table, LIGHT, CAMERA, AMB, DIFF, SPEC, 1);
    
    return pillows;
}

// Construct the scene using objects built from cubes/prisms
vector<GLfloat> init_scene() {
    vector<GLfloat> scene;
    
    ObjectModel couch = build_couch();
    vector<GLfloat> couch_points = couch.get_points();
    scene.insert(scene.end(), couch_points.begin(), couch_points.end());
   
    
    ObjectModel table = build_table();
    vector<GLfloat> table_vertices = table.get_points();
    scene.insert(scene.end(), table_vertices.begin(), table_vertices.end());
    
    ObjectModel lamp = build_lamp();
    vector<GLfloat> lamp_points = lamp.get_points();
    scene.insert(scene.end(), lamp_points.begin(), lamp_points.end());
    
    ObjectModel pillows = build_pillows();
    vector<GLfloat> pillows_vertices = pillows.get_points();
    scene.insert(scene.end(), pillows_vertices.begin(), pillows_vertices.end());
    
    //cout << scene.size();
    
    // TODO: Build your scene here
    return scene;
    
    
    
}

// Construct the color mapping of the scene
vector<GLfloat> init_color() {
    vector<GLfloat> scene;
    
    ObjectModel couch = build_couch();
    vector<GLfloat> couch_colors = couch.get_base_colors();
    scene.insert(scene.end(), couch_colors.begin(), couch_colors.end());
    
    ObjectModel table = build_table();
    vector<GLfloat> table_colors = table.get_base_colors();
    scene.insert(scene.end(), table_colors.begin(), table_colors.end());
    
    ObjectModel lamp = build_lamp();
    vector<GLfloat> lamp_colors = lamp.get_base_colors();
    scene.insert(scene.end(), lamp_colors.begin(), lamp_colors.end());
    
    ObjectModel pillows = build_pillows();
    vector<GLfloat> pillows_colors = pillows.get_base_colors();
    scene.insert(scene.end(), pillows_colors.begin(), pillows_colors.end());
    
    /*
    vector<GLfloat> table_color = (build_table().get_colors());
    scene.insert(scene.end(), table_color.begin(), table_color.end());
    
    vector<GLfloat> lamp_color = (build_lamp().get_colors());
    scene.insert(scene.end(), lamp_color.begin(), lamp_color.end());
    
    vector<GLfloat> pillows_color = (build_pillows().get_colors());
    scene.insert(scene.end(), pillows_color.begin(), pillows_color.end());
    */
    return scene;
    
}


void display_func() {
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    // TODO: Initialize your scene at every iteration
    SCENE.set_points(init_scene());
    SCENE.set_colors(init_color());
    
    SCENE.set_points((to_cartesian_coord(SCENE.get_points())));
    
    // TODO: Apply shading to the scene
    
    
    // TODO: Rotate the scene using the rotation matrix
    
    
    GLfloat* scene_vertices = vector2array(SCENE.get_points());
    GLfloat* color_vertices = vector2array(SCENE.get_colors());
    // Pass the scene vertex pointer
    glVertexPointer(3,                // 3 components (x, y, z)
                    GL_FLOAT,         // Vertex type is GL_FLOAT
                    0,                // Start position in referenced memory
                    scene_vertices);  // Pointer to memory location to read from
    
    // Pass the color vertex pointer
    glColorPointer(3,                   // 3 components (r, g, b)
                   GL_FLOAT,            // Vertex type is GL_FLOAT
                   0,                   // Start position in referenced memory
                   color_vertices);     // Pointer to memory location to read from
    
    // Draw quad point planes: each 4 vertices with 3 dimensions
    glDrawArrays(GL_QUADS, 0, (int)SCENE.get_points().size() / 3);
    
    glFlush();            //Finish rendering
    glutSwapBuffers();
    
    // Clean up
    delete scene_vertices;
    delete color_vertices;
}

void idle_func() {
    THETA = THETA + 0.3;
    display_func();
}

int main (int argc, char **argv) {
    // Initialize GLUT
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_RGB | GLUT_DOUBLE | GLUT_DEPTH);
    glutInitWindowSize(800, 600);
    // Create a window with rendering context and everything else we need
    glutCreateWindow("Assignment 4");
    
    setup();
    init_camera();
    
    SCENE.set_points(init_scene());
    SCENE.set_base_colors(init_color());
    
    // Set up our display function
    glutDisplayFunc(display_func);
    glutIdleFunc(idle_func);
    // Render our world
    glutMainLoop();
    
    return 0;
}
